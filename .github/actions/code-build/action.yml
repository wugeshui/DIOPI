name: execute script

description: build job

inputs:
  machine:
    description: If set to other value, the job need ssh
    required: true
    default: "local"
  build-env:
    description: Set up the build environment
    required: true
    default: ""
  build_shell:
    description: Set the build shell passed in by the build
    required: true
    default: ""
  job_name:
    description: Set task name
    required: true
    default: ""
  partition:
    description: Set cluster partition
    required: true
    default: ""
  cleaner:
    description: After the construction is completed, decide whether to clean up (e: all,data,error_all,error_data)
    required: true
    default: "none"
  working_path:
    description: ci work home
    required: false
    default: '/mnt/cache/share/deeplinkci/github/${{ github.repository }}/${{ github.run_number }}'

runs:
  using: composite
  steps:
    - name : build
      env:
        JOB_NAME: ${inputs.job_name}
        MACHINE: ${{ inputs.machine }}
        GEN_DATA: "diopi_test/python/cache"
      shell: bash
      run: |
        if [ ${inputs.cleaner} == "error_all" ];then
          cleaner="|| ( cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME} && exit 1 )"
        if [ ${inputs.cleaner} == "error_data" ];then
          cleaner="|| ( cd ${{ inputs.working_path }}/${JOB_NAME} && git clean -xdf ${GEN_DATA} && exit 1 )"
        elif [ ${inputs.cleaner} == "data" ];then
          cleaner="&& cd ${{ inputs.working_path }/${JOB_NAME} && git clean -xdf ${GEN_DATA} || ( cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/${JOB_NAME} && git clean -xdf ${GEN_DATA} && exit 1 )"
        else
          cleaner="&& cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME} || ( cd ${DEEPLINK_PATH}/${GITHUB_RUN_NUMBER}/ && rm -rf ${JOB_NAME} && exit 1 )"
        fi
        if [ ${MACHINE} != "local" ];then
          ssh ${MACHINE} """
            set -e
            source ~/.bashrc
            export CI=true
            source ${inputs.build-env}
            cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME}  && cp -R source ${JOB_NAME} && cd ${JOB_NAME}
            srun --job-name=${JOB_NAME} --partition=${inputs.partition} --time=10 bash -c '${build_shell}' ${cleaner}          
          """
        else
          export CI=true
          source ~/.bashrc
          cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME}  && cp -R source ${JOB_NAME} && cd ${JOB_NAME}
          ${build_shell} ${cleaner} 
        fi
