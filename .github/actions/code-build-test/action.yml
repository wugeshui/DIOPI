name: execute script

description: build and test job

inputs:
  machine:
    description: If set to other value, the job need ssh
    required: true
    default: "local"
  build_env:
    description: Set up the build environment
    required: true
    default: ""
  build_shell:
    description: Set the build shell passed in by the build
    required: true
    default: ""
  job_name:
    description: Set task name
    required: true
    default: ""
  partition:
    description: Set cluster partition
    required: true
    default: ""
  cleaner:
    description: After the construction is completed, decide whether to clean up (all,data,error_all,error_data)
    required: false
    default: ""
  copy_job:
    description: False to use old job, true to delete and recopy first
    required: false
    default: "true"
  working_path:
    description: ci work home
    required: false
    default: '/mnt/cache/share/deeplinkci/github/${{ github.repository }}/${{ github.run_number }}'

runs:
  using: composite
  steps:
    - name : build and test
      env:
        JOB_NAME: ${{ inputs.job_name }}
        MACHINE: ${{ inputs.machine }}
        CLEANER: ${{ inputs.cleaner }}
        GEN_DATA: "diopi_test/python/cache"
      shell: bash
      run: |
        if [ ${CLEANER} == "error_all" ];then
          cleaner_shell="|| ( cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME} && exit 1 )"
        elif [ ${CLEANER} == "error_data" ];then
          cleaner_shell="|| ( cd ${{ inputs.working_path }}/${JOB_NAME} && git clean -xdf ${GEN_DATA} && exit 1 )"
        elif [ ${CLEANER} == "data" ];then
          cleaner_shell="&& cd ${{ inputs.working_path }}/${JOB_NAME} && git clean -xdf ${GEN_DATA} || ( cd ${{ inputs.working_path }}/${JOB_NAME} && git clean -xdf ${GEN_DATA} && exit 1 )"
        else
          cleaner_shell="&& cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME} || ( cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME} && exit 1 )"
        fi
        if [ ${MACHINE} != "local" ];then
          ssh ${MACHINE} """
            set -e
            source ~/.bashrc
            export CI=true
            source ${{ inputs.build_env }} && cd ${{ inputs.working_path }}
            if [ ${{ inputs.copy_job == "true" }} ];then
              rm -rf ${JOB_NAME}  && cp -R source ${JOB_NAME}
            fi
            cd ${JOB_NAME}
            srun --job-name=${JOB_NAME} --partition=${{ inputs.partition }} --time=10 bash -c '${{ inputs.build_shell }}' ${cleaner_shell}
          """
        else
          export CI=true
          source ~/.bashrc
          cd ${{ inputs.working_path }} && rm -rf ${JOB_NAME}  && cp -R source ${JOB_NAME} && cd ${JOB_NAME}
          ${build_shell} ${cleaner} 
        fi
